autoload -U colors && colors

function __git_ps1 {
    git status --porcelain --branch 2>/dev/null | awk '
        function second(str, split_pat, _a) {
            split(str, _a, split_pat); return _a[2]
        }
        function rstrip(str, len) {
            return substr(str, 1, length(str) - len)
        }
        function color(name, bold) {
            return "%{$fg" bold "[" name "]%}"
        }
        $1 == "##" {
           split($2, a, /\.\.\./); local_branch = a[1]; remote_branch = a[2];
           split(rstrip(second($0, "["), 1), a, ", ");
               ahead = second(a[1], " "); behind = second(a[2], " ");
        }
        $1 ~ /\?/ {untracked += 1}
        $1 ~ /[MADRCU]+/ {modified += 1}
        END {
            if (local_branch) {
                if (modified) {
                    local_color = color("red")
                    start = "{"
                    end = "}"
                    if (untracked) {
                        end = end color("cyan") "!"
                    }
                } else if (untracked) {
                    local_color = color("cyan")
                    start = "["; end = "]"
                } else {
                    local_color = color("green")
                    start = "("; end = ")"
                }
                prompt = local_color start local_branch end

                if (behind) {
                    ab = color("yellow") behind "←"
                }
                if (ahead) {
                    ab = ab color("red") "→" ahead
                }
                if (ab) {
                    prompt = prompt " " ab
                }
                print " " prompt "%{$reset_color%}"
            }
        }'
}

function __jobs_ps1 {
    jobs | awk '
        $3 == "suspended" {suspended += 1}
        END {
            if (NR) {
                if (suspended) {
                    suspended_prompt = "%{$fg_bold[red]%}" suspended "%{$reset_color%}/"
                }
                prompt = " [" suspended_prompt NR "]"
            }
            print prompt
        }'
}

function __tmux_ps1 {
    if [[ -n $TMUX ]]; then
        local tmux_session=$(tmux display-message -p "#S")
        local num_clients=$(tmux list-clients -t $tmux_session | wc -l)
        if [[ $num_clients -gt 1 ]]; then
            echo " %{$fg[yellow]%}⎚ $num_clients%{$reset_color%}"
        fi
    fi
}

function precmd {
    local _venv="%{$fg_bold[black]%}${VIRTUAL_ENV+ }${VIRTUAL_ENV##*/}%{$reset_color%}"
    local _git="${(e)$(__git_ps1)}"
    local _tmux="${(e)$(__tmux_ps1)}"
    local _jobs="${(e)$(__jobs_ps1)}"
    local _time=" %{$fg_bold[grey]%}%D{%H:%M}%{$reset_color%}"
    local content='$_pwd$_venv$_git$_rule$_tmux$_jobs$_time'

    local ignore_pat="%{*%}"
    local prompt_len=${(e)content}
    local prompt_len=${#${(%)${(S)prompt_len//$~ignore_pat}}}
    local pwd_len=${#${(%):-%~}}
    local remaining=$(($COLUMNS - $prompt_len - $pwd_len))

    if [[ $remaining -gt 0 ]]; then
        local _pwd=%~
        local _rule=%{$fg_bold[grey]%}${(r:$remaining::─:: :)}%{$reset_color%}
    else
        local _pwd="%$(($COLUMNS - $prompt_len))<…<%~%<<"
    fi
    _pwd="%{$fg_bold[blue]%}$_pwd%{$reset_color%}"

    local _prompt_line1=${(e)content}

    local _tick_color="%{%(?.$fg_bold[green].$fg_bold[red])%}"
    local _tick_symbol="%(?.✓.✗)"
    local _prompt_line2="%n@%m $_tick_color$_tick_symbol%{$reset_color%} "
    PROMPT="
$_prompt_line1
$_prompt_line2"
}
